FORMAT: 1A
HOST: https://api.leadiq.com

# LeadIQ Contact Search

This GraphQL API is designed to find a contact by name and company or linkedin url. A state-of-the-art technology is used to support tracking original data sources for email, phone and job changes. Contact Search is available starting October 2018 and new end points like account search (searched all contacts in one account) and data feedback will be provided in Q2 2019.

Last update: March, 2019

**Note**

This documentation is to describe how to use the API and explain some of the design decisions. Tools like Insomnia or GraphQL Playground are privided as a more interactive way to explore GraphQL schema. For details, please see [Using GraphQL](#using-graphql).

# HTTP Header

Content type **application/json** must be sent in the request header.

|    HTTP Header    |              Header Value             |
|-------------------|---------------------------------------|
| **Content-Type**  | _application/json_                    |

# Authentication

## Basic Auth protected resource

LeadIQ uses **HTTP BASIC Auth** for authenticating the API calls. The user name is your “API key” and the password is empty. The API key could be got from ‘Your API Key’ page.

The **API token** can be requested at https://leadiq.com/enrichment-apis.

AUTHENTICATION IN CURL

For curl you could specify the API key using the -u option

curl {api url} -u {api key}:

Since the password is not present, nothing is specified after the colon(:)

## Search by Name and Company [/graphql{?name_company}]

Find a contact by name and company.

**Request Body**

```
query SearchPeople($input: SearchPeopleInput!) {
  searchPeople(input: $input) {
    totalResults
    hasMore
    results {
      _id
      personalPhones {
        value
        type
      }
      name {
        first
        last
      }
      linkedin {
        linkedinUrl
        linkedinId
      }
      currentPositions {
        title
        dateRange {
          start
          end
        }
        companyInfo {          
          name
          numberOfEmployees
          industry
          domain
          address
          country
          logoUrl
          phones          
          locationInfo {
            street1
            street2
            city
            areaLevel1
            country
            postalCode
            formattedAddress
          }
        }
        emails {
          value
          type
          status
        }
        phones {
          value
          type
          status
        }
      }
    }
  }
}

Query Variables

{
    "input": {
        "fullName": "Niels Bentzen",
        "company": {
            "name": "Danish Refugee Council"
        }
    }
}
```

### Request [POST]

Gives back a list of users based on the search input - name and company.


+ Request (application/json)

    + Header 
            
            Authorization: Basic {Base64 Encode(api key)}:
                    
    + Attributes (SearchPeopleInput)

    + Body

            {
                "query": "query SearchPeople($input: SearchPeopleInput!) { searchPeople(input: $input) { totalResults hasMore results { _id name { first last } linkedin { linkedinUrl linkedinId } currentPositions { title companyInfo { name industry } emails { value type status } phones { value type status } } } } }",
                "variables": {"input": { "fullName": "Niels Bentzen", "company":{ "name": "Danish Refugee Council" }}}
            }
            

+ Response 200 (application/json)

    + Attributes (SearchResult)

    + Body

            {
                "data": {
                    "searchPeople": {
                    "totalResults": 1,
                    "hasMore": false,
                    "results": [
                        {
                        "_id": "PersonID-d053d022-7a5d-4d74-80e9-bf05ffb0bd6e",
                        "name": {
                            "first": "Niels",
                            "last": "Bentzen"
                        },
                        "linkedin": {
                            "linkedinUrl": "https://www.linkedin.com/in/niels-bentzen-12539324",
                            "linkedinId": "84546029"
                        },
                        "currentPositions": [
                            {
                            "title": "Program Advisor",
                            "companyInfo": {
                                "name": "Danish Refugee Council / Dansk Flygtningehjælp",
                                "industry": "Nonprofit Organization Management"
                            },
                            "emails": [
                                {
                                "value": "niels.bentzen@drc.dk",
                                "type": "WorkEmail",
                                "status": "Verified"
                                }
                            ],
                            "phones": [
                                {
                                "value": "+45-33-73-50-00",
                                "type": "WorkHQ",
                                "status": "Verified"
                                }
                            ]
                            }
                        ]
                        }
                    ]
                    }
                }
            }            

+ Response 400 (application/json)
    
    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

+ Response 401 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

## Search by Name and Domain [/graphql{?name_domain}]

Find a contact by name and domain.

**Request Body**

```
query SearchPeople($input: SearchPeopleInput!) {
  searchPeople(input: $input) {
    totalResults
    hasMore
    results {
      _id
      personalPhones {
        value
        type
      }
      name {
        first
        last
      }
      linkedin {
        linkedinUrl
        linkedinId
      }
      currentPositions {
        title
        dateRange {
          start
          end
        }
        companyInfo {          
          name
          numberOfEmployees
          industry
          domain
          address
          country
          logoUrl
          phones          
          locationInfo {
            street1
            street2
            city
            areaLevel1
            country
            postalCode
            formattedAddress
          }
        }
        emails {
          value
          type
          status
        }
        phones {
          value
          type
          status
        }
      }
    }
  }
}

Query Variables

{
    "input": {
        "fullName": "Melissa Schwenker"
        "company": {
            "domain": "salesforce.com"
        }
    }
}
```

### Request [POST]

Gives back a list of users based on the search input - name and domain.

+ Request (application/json)

    + Header 
            
        Authorization: Basic {Base64 Encode(api key)}:

    + Attributes (SearchPeopleInput)

    + Body

            {
                "query": "query SearchPeople($input: SearchPeopleInput!) { searchPeople(input: $input) { totalResults hasMore results { _id name { first last } linkedin { linkedinUrl linkedinId } currentPositions { title companyInfo { name industry } emails { value type status } phones { value type status } } } } }",
                "variables": {"input": { "fullName": "Melissa Schwenker", "company":{ "domain": "salesforce.com" }}}
            }
            

+ Response 200 (application/json)

    + Attributes (SearchResult)

    + Body

            {
                "data": {
                    "searchPeople": {
                    "totalResults": 1,
                    "hasMore": false,
                    "results": [
                        {
                        "_id": "PersonID-fd1ed69b-1695-4079-a0d9-1d60a719fffb",
                        "name": {
                            "first": "Melissa",
                            "last": "Schwenker"
                        },
                        "linkedin": {
                            "linkedinUrl": "https://www.linkedin.com/in/melissa-schwenker-660b845",
                            "linkedinId": "17840808"
                        },
                        "currentPositions": [
                            {
                            "title": "Commercial Account Executive - Financial Services",
                            "companyInfo": {
                                "name": "Salesforce",
                                "industry": "Internet"
                            },
                            "emails": [
                                {
                                "value": "mschwenker@salesforce.com",
                                "type": "WorkEmail",
                                "status": "Verified"
                                }
                            ],
                            "phones": [
                                {
                                "value": "+1-415-901-7000",
                                "type": "WorkPhone",
                                "status": "Verified"
                                },
                                {
                                "value": "+1-312-873-0640",
                                "type": "WorkPhone",
                                "status": "Verified"
                                },
                                {
                                "value": "+1-312-288-3600",
                                "type": "WorkPhone",
                                "status": "Verified"
                                },
                                {
                                "value": "+1-415-901-7000",
                                "type": "WorkHQ",
                                "status": "Verified"
                                }
                            ]
                            }
                        ]
                        }
                    ]
                    }
                }
            }       

+ Response 400 (application/json)
    
    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

+ Response 401 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

## Search by Linkedin Url [/graphql{?linkedinUrl}]

Find a contact by linkedin url. 

**Refs**:
1. Current version still requires you to pass in first name. This will be fixed in the next release.
2. Linkedin url can't have the ending slash. This will be fixed in the next release.

**Request Body**

```
Query Variables

{
    "input": {
        "linkedinUrl": "/in/niels-bentzen-12539324/",
        "containsWorkContactInfo": false
    }
}
```

### Request [POST]

Gives back a list of users based on the search input - linkedin url.

+ Request (application/json)

    + Header 
            
            Authorization: Basic {Base64 Encode(api key)}:

    + Attributes (SearchPeopleInput)

    + Body

            {
                "query": "query SearchPeople($input: SearchPeopleInput!) { searchPeople(input: $input) { totalResults hasMore results { _id name { first last } linkedin { linkedinUrl linkedinId } currentPositions { title companyInfo { name industry } emails { value type status } phones { value type status } } } } }",
                "variables": {"input": { "linkedinUrl": "/in/niels-bentzen-12539324"}}
            }

+ Response 200 (application/json)

    + Attributes (SearchResult)

    + Body

            {
                "data": {
                    "searchPeople": {
                    "totalResults": 1,
                    "hasMore": false,
                    "results": [
                        {
                        "_id": "PersonID-d053d022-7a5d-4d74-80e9-bf05ffb0bd6e",
                        "name": {
                            "first": "Niels",
                            "last": "Bentzen"
                        },
                        "linkedin": {
                            "linkedinUrl": "https://www.linkedin.com/in/niels-bentzen-12539324",
                            "linkedinId": "84546029"
                        },
                        "currentPositions": [
                            {
                            "title": "Program Advisor",
                            "companyInfo": {
                                "name": "Danish Refugee Council / Dansk Flygtningehjælp",
                                "industry": "Nonprofit Organization Management"
                            },
                            "emails": [
                                {
                                "value": "niels.bentzen@drc.dk",
                                "type": "WorkEmail",
                                "status": "Verified"
                                }
                            ],
                            "phones": [
                                {
                                "value": "+45-33-73-50-00",
                                "type": "WorkHQ",
                                "status": "Verified"
                                }
                            ]
                            }
                        ]
                        }
                    ]
                    }
                }
            }

+ Response 400 (application/json)
    
    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

+ Response 401 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

# Data Structures

## SearchPeopleInput
+ skip (number)
+ limit (number)
+ firstName (string)
+ lastName (string)
+ middleName (string)
+ fullName (string)
+ company (CompanyDetails)
+ linkedinId (string)
+ linkedinUrl (string)
+ email (string)
+ containsWorkContactInfo (boolean)

## CompanyDetails
+ name (string)
+ domain (string)
+ linkedinId (string)
+ country (string)

## PersonRecord
+ _id (string)
+ name (NameInfo)
+ currentPositions (array[PositionRecord])
+ pastPositions (array[PositionRecord])
+ linkedin (LinkedinRecord)
+ containsWorkContactInfo (boolean)
+ personalEmails (array[EmailRecord])
+ personalPhones (array[PhoneRecord])

## NameInfo
+ first (string)
+ fullName (string)
+ last (string)
+ middle (string)

## PositionRecord
+ companyId (string)
+ companyInfo (CompanyInfo)
+ title (string)
+ dateRange (DateRange)
+ emails (array[EmailRecord])
+ phones (array[PhoneRecord])
+ sources (array[SourceType_GenericFieldType_GenericFieldStatus])
+ updatedAt (string)

## CompanyInfo
+ name (string)
+ alternativeNames (array[string])
+ domain (string)
+ emailDomains (array[string])
+ type (string)
+ phones (array[string])
+ country (string)
+ address (string)
+ locationInfo (LocationInfo)
+ logoUrl (string)
+ numberOfEmployees (number)
+ industry (string)

## LocationInfo
+ formattedAddress (string)
+ street1 (string)
+ street2 (string)
+ city (string)
+ areaLevel1 (string)
+ country (string)
+ postalCode (string)

## DateRange
+ start (number) - Timestamp
+ end (number) - Timestamp

## `SourceType_GenericFieldType_GenericFieldStatus`
+ source (string)
+ type (GenericFieldType)
+ status (GenericStatusType)
+ providerIds (array[string])
+ updatedAt (string)

## GenericFieldType (enum[string])
+ NotApplicable
+ (EmailType)
+ (PhoneType)

## GenericStatusType (enum[string])
+ Valid
+ Invalid
+ (EmailVerificationStatus)
+ (PhoneVerificationStatusType)

## EmailRecord
+ value (string)
+ type (EmailType)
+ status (EmailVerificationStatus)
+ sources (array[SourceType_GenericFieldType_GenericFieldStatus])
+ updatedAt (string)

## EmailType (enum[string])
+ WorkEmail
+ PersonalEmail

## EmailVerificationStatus (enum[string])
+ Verified
+ Unverified
+ VerifiedLikely
+ Invalid

## PhoneRecord
+ value (string)
+ type (PhoneType)
+ status (PhoneVerificationStatusType)
+ sources (array[SourceType_GenericFieldType_GenericFieldStatus])
+ updatedAt (string)

## PhoneType (enum[string])
+ WorkPhone
+ PersonalLandline
+ PersonalMobile
+ WorkMobile
+ WorkHQ
+ PersonalPhone
+ WorkBranch

## PhoneVerificationStatusType (enum[string])
+ Verified
+ Unverified
+ Invalid

## LinkedinRecord
+ linkedinId (string)
+ linkedinUrl (string)
+ type (GenericFieldType)
+ status (GenericStatusType)
+ sources (array[SourceType_GenericFieldType_GenericFieldStatus])
+ updatedAt (string)

## SearchResult
+ totalResults (number)
+ hasMore (boolean)
+ results (PersonRecord)


# LeadIQ Contact Feedback Service

## Mark as invalid

For given list of wrong work emails and phone numbers, makes feedback with these data marked as invalid.

**Request Body**

```
mutation markAsInvalid($input: MarkAsInvalidInput!) {
  markAsInvalid(input: $input)
}

Query Variables

{
    "input": {
        "workEmails": [],
        "workPhones": []
    }
}
```

### Request [POST]

+ Request (application/json)

    + Header

    Authorization: Basic {Base64 Encode(api key:)}:

    + Attributes (MarkAsInvalidInput)

    + Body

            {
                "query": "mutation markAsInvalid($input: MarkAsInvalidInput!) {markAsInvalid(input: $input)}",
                "variables": {"input": {"workEmails": [],"workPhones": []}}
            }


+ Response 200 (application/json)

    + Attributes (Boolean)

    + Body

            {
                "data": {
                    "markAsInvalid" : true
                }
            }


+ Response 400/401 (application/json)

    + Body

            {
                "error": "error message"
            }


# Group Using GraphQL
<a name="using-graphql"></a>

GraphQL is a web technology used to decouple the request/response structure from particular endpoints.
It works by acting as a layer over existing request/response systems (most frequently HTTP) that allows the client to specify the type and structure of data that they wish to receive. 

The server manages efficiently receiving queries and aggregating the requisite data for the client.

## Getting Started

Working with GraphQL is fairly simply however it can be somewhat unusual for people are coming from REST backgrounds. It should seem more familiar to those who have dealt with Databases in the past as it is simply a query language for client requests.

To use GraphQL you need to know what types are available to the client for requests. For REST endpoints this is quite static, as the endpoints are developed by the API server and then exposed for consumption. Meaning that changing the data requires the server bumps up new API version. For GraphQL, this is only the case if there are *brand-new* types being introduced, otherwise you can compose the existing types in any manner you please.

To see the support types in the LeadIQ GraphQL API you could try reading the schema using tools like Insomnia or GraphQL Playground.

## Resources
GraphQL as a technology is far too large to elaborate completely here. For more technical references on how to use GraphQL itself please review the following resources.

- [GraphQL Docs](http://graphql.org/learn/)

Here is the list of tools that you can download to explore GraphQL schema.

- [Insomnia](https://insomnia.rest/graphql/)
- [GraphQL Playground](https://github.com/prisma/graphql-playground)
