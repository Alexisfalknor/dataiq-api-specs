FORMAT: 1A
HOST: https://api.leadiq.com

# LeadIQ Search API

This GraphQL API is designed to find a contact by name and company or linkedin url. A state-of-the-art technology is used to support tracking original data sources for email, phone and job changes. There are mainly 3 kinds of APIs - contact search, advanced Search (searched all contacts in one account) and data feedback.

Last update: July 10, 2019

**Note**

This documentation is to describe how to use the API and explain some of the design decisions. Tools like Insomnia or GraphQL Playground are provided as a more interactive way to explore GraphQL schema. For details, please see [Using GraphQL](#using-graphql).

# HTTP Header

Content type **application/json** must be sent in the request header.

|    HTTP Header    |              Header Value             |
|-------------------|---------------------------------------|
| **Content-Type**  | _application/json_                    |

# Authentication

## Basic Auth protected resource

LeadIQ uses **HTTP BASIC Auth** for authenticating the API calls. The user name is your “API key” and the password is empty. The API key is displayed on the ‘Your API Key’ page.

The **API key** can be requested by setting up your account through the "Get Started" link at https://leadiq.com/enrichment-apis.

#### AUTHENTICATION IN CURL

For curl you could specify the API key using the -u option:

```
curl --request POST --url https://api.leadiq.com/graphql -u '<api key>:' ...
```

Since the password is not present, nothing is specified after the colon(:)

To use the api key in the authroization header instead you first need to base64 encode 'api_key:', and can then use it as below:

```
curl --request POST --url https://api.leadiq.com/graphql --header 'authorization: Basic base64(<api key>:)' ...
```

## Search Contact by Name and Company [/graphql{?name_company}]

Find a contact by name and company.

**Request Body**

```
query SearchPeople($input: SearchPeopleInput!) {
  searchPeople(input: $input) {
    totalResults
    hasMore
    results {
      _id
      personalPhones {
        value
        type
      }
      name {
        first
        last
      }
      linkedin {
        guid
        linkedinUrl
        linkedinId
      }
      currentPositions {
        title
        dateRange {
          start
          end
        }
        companyInfo {
          name
          numberOfEmployees
          industry
          domain
          address
          country
          logoUrl
          phones
          locationInfo {
            street1
            street2
            city
            areaLevel1
            country
            postalCode
            formattedAddress
          }
        }
        emails {
          value
          type
          status
        }
        phones {
          value
          type
          status
        }
      }
    }
  }
}
Query Variables
{
    "input": {
        "fullName": "Melissa Schwenker",
        "company": {
            "name": "Salesforce"
        }
    }
}
```

### Request [POST]

Gives back a list of users based on the search input - name and company.


+ Request (application/json)

    + Header

            Authorization: Basic <Base64 Encode(api_key:)>

    + Attributes (SearchPeopleInput)

    + Body

            {
                "query": "query SearchPeople($input: SearchPeopleInput!) { searchPeople(input: $input) { totalResults hasMore results { _id name { first last } linkedin { linkedinUrl linkedinId } currentPositions { title companyInfo { name industry } emails { value type status } phones { value type status } } } } }",
                "variables": {"input": { "fullName": "Melissa Schwenker", "company":{ "name": "Salesforce" }}}
            }


+ Response 200 (application/json)

    + Attributes (SearchResult)

    + Body

            {
                "data": {
                    "searchPeople": {
                    "totalResults": 1,
                    "hasMore": false,
                    "results": [
                        {
                        "_id": "PersonID-d053d022-7a5d-4d74-80e9-bf05ffb0bd6e",
                        "name": {
                            "first": "Melissa",
                            "last": "Schwenker"
                        },
                        "linkedin": {
                            "guid": "ACwAAAEQOqgBMDtkCuiNKmI703M0_f-OlGnlIaY",
                            "linkedinId": "17840808",
                            "linkedinUrl": "https://www.linkedin.com/in/melissa-schwenker-660b845"
                        },
                        "currentPositions": [
                            {
                              "title": "Commercial Account Executive - Financial Services",
                              "companyInfo": {
                                  "name": "Salesforce",
                                  "industry": "Internet"
                              },
                              "emails": [
                                  {
                                    "status": "Verified",
                                    "type": "WorkEmail",
                                    "value": "mschwenker@salesforce.com
                                  }
                              ],
                              "phones": [
                                  {
                                    "status": "Verified",
                                    "type": "WorkPhone",
                                    "value": "+1-312-288-3600"
                                  },
                                  {
                                    "status": "Verified",
                                    "type": "WorkPhone",
                                    "value": "+1-312-873-0640"
                                  },
                                  {
                                    "status": "Verified",
                                    "type": "WorkPhone",
                                    "value": "+1-415-901-7000"
                                  }
                              ]
                            }
                        ]
                        }
                    ]
                    }
                }
            }

+ Response 400 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

+ Response 401 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

## Search Contact by Name and Domain [/graphql{?name_domain}]

Find a contact by name and domain.

**Request Body**

```
query SearchPeople($input: SearchPeopleInput!) {
  searchPeople(input: $input) {
    totalResults
    hasMore
    results {
      _id
      personalPhones {
        value
        type
      }
      name {
        first
        last
      }
      linkedin {
        guid
        linkedinUrl
        linkedinId
      }
      currentPositions {
        title
        dateRange {
          start
          end
        }
        companyInfo {
          name
          numberOfEmployees
          industry
          domain
          address
          country
          logoUrl
          phones
          locationInfo {
            street1
            street2
            city
            areaLevel1
            country
            postalCode
            formattedAddress
          }
        }
        emails {
          value
          type
          status
        }
        phones {
          value
          type
          status
        }
      }
    }
  }
}
Query Variables
{
    "input": {
        "fullName": "Melissa Schwenker"
        "company": {
            "domain": "salesforce.com"
        }
    }
}
```

### Request [POST]

Gives back a list of users based on the search input - name and domain.

+ Request (application/json)

    + Header

            Authorization: Basic <Base64 Encode(api_key:)>

    + Attributes (SearchPeopleInput)

    + Body

            {
                "query": "query SearchPeople($input: SearchPeopleInput!) { searchPeople(input: $input) { totalResults hasMore results { _id name { first last } linkedin { linkedinUrl linkedinId } currentPositions { title companyInfo { name industry } emails { value type status } phones { value type status } } } } }",
                "variables": {"input": { "fullName": "Melissa Schwenker", "company":{ "domain": "salesforce.com" }}}
            }


+ Response 200 (application/json)

    + Attributes (SearchResult)

    + Body

            {
                "data": {
                    "searchPeople": {
                    "totalResults": 1,
                    "hasMore": false,
                    "results": [
                        {
                        "_id": "PersonID-fd1ed69b-1695-4079-a0d9-1d60a719fffb",
                        "name": {
                          "first": "Melissa",
                          "last": "Schwenker"
                        },
                        "linkedin": {
                          "guid": "ACwAAAEQOqgBMDtkCuiNKmI703M0_f-OlGnlIaY",
                          "linkedinUrl": "https://www.linkedin.com/in/melissa-schwenker-660b845",
                          "linkedinId": "17840808"
                        },
                        "currentPositions": [
                          {
                            "title": "Commercial Account Executive - Financial Services",
                            "companyInfo": {
                                "name": "Salesforce",
                                "industry": "Internet"
                            },
                            "emails": [
                                {
                                "value": "mschwenker@salesforce.com",
                                "type": "WorkEmail",
                                "status": "Verified"
                                }
                            ],
                            "phones": [
                                {
                                  "value": "+1-415-901-7000",
                                  "type": "WorkPhone",
                                  "status": "Verified"
                                },
                                {
                                  "value": "+1-312-873-0640",
                                  "type": "WorkPhone",
                                  "status": "Verified"
                                },
                                {
                                  "value": "+1-312-288-3600",
                                  "type": "WorkPhone",
                                  "status": "Verified"
                                }
                              ]
                          }
                        ]
                        }
                    ]
                    }
                }
            }

+ Response 400 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

+ Response 401 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

## Search Contact by Linkedin Url [/graphql{?linkedinUrl}]

Find a contact by linkedin url.

**Request Body**

```
query SearchPeople($input: SearchPeopleInput!) {
  searchPeople(input: $input) {
    totalResults
    hasMore
    results {
      _id
      personalPhones {
        value
        type
      }
      name {
        first
        last
      }
      linkedin {
        linkedinUrl
        linkedinId
      }
      currentPositions {
        title
        dateRange {
          start
          end
        }
        companyInfo {
          name
          numberOfEmployees
          industry
          domain
          address
          country
          logoUrl
          phones
          locationInfo {
            street1
            street2
            city
            areaLevel1
            country
            postalCode
            formattedAddress
          }
        }
        emails {
          value
          type
          status
        }
        phones {
          value
          type
          status
        }
      }
    }
  }
}
Query Variables
{
    "input": {
        "linkedinUrl": "/in/niels-bentzen-12539324/"
    }
}
```

### Request [POST]

Gives back a list of users based on the search input - linkedin url.

+ Request (application/json)

    + Header

            Authorization: Basic <Base64 Encode(api_key:)>

    + Attributes (SearchPeopleInput)

    + Body

            {
                "query": "query SearchPeople($input: SearchPeopleInput!) { searchPeople(input: $input) { totalResults hasMore results { _id name { first last } linkedin { linkedinUrl linkedinId } currentPositions { title companyInfo { name industry } emails { value type status } phones { value type status } } } } }",
                "variables": {"input": { "linkedinUrl": "/in/niels-bentzen-12539324"}}
            }

+ Response 200 (application/json)

    + Attributes (SearchResult)

    + Body

            {
                "data": {
                    "searchPeople": {
                    "totalResults": 1,
                    "hasMore": false,
                    "results": [
                        {
                        "_id": "PersonID-d053d022-7a5d-4d74-80e9-bf05ffb0bd6e",
                        "name": {
                            "first": "Niels",
                            "last": "Bentzen"
                        },
                        "linkedin": {
                            "linkedinUrl": "https://www.linkedin.com/in/niels-bentzen-12539324",
                            "linkedinId": "84546029"
                        },
                        "currentPositions": [
                            {
                            "title": "Program Advisor",
                            "companyInfo": {
                                "name": "Danish Refugee Council / Dansk Flygtningehjælp",
                                "industry": "Nonprofit Organization Management"
                            },
                            "emails": [
                                {
                                "value": "niels.bentzen@drc.dk",
                                "type": "WorkEmail",
                                "status": "Verified"
                                }
                            ],
                            "phones": [
                                {
                                "value": "+45-33-73-50-00",
                                "type": "WorkHQ",
                                "status": "Verified"
                                }
                            ]
                            }
                        ]
                        }
                    ]
                    }
                }
            }

+ Response 400 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

+ Response 401 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

## Search Contact by Email [/graphql{?email}]

Find a contact by email.

**Request Body**

```
query SearchPeople($input: SearchPeopleInput!) {
  searchPeople(input: $input) {
    totalResults
    hasMore
    results {
      _id
      personalPhones {
        value
        type
      }
      name {
        first
        last
      }
      linkedin {
        linkedinUrl
        linkedinId
      }
      currentPositions {
        title
        dateRange {
          start
          end
        }
        companyInfo {
          name
          numberOfEmployees
          industry
          domain
          address
          country
          logoUrl
          phones
          locationInfo {
            street1
            street2
            city
            areaLevel1
            country
            postalCode
            formattedAddress
          }
        }
        emails {
          value
          type
          status
        }
        phones {
          value
          type
          status
        }
      }
    }
  }
}
Query Variables
{
    "input": {
        "email": "niels.bentzen@drc.dk"
    }
}
```

### Request [POST]

Gives back a list of users based on the search input - email.

+ Request (application/json)

    + Header

            Authorization: Basic <Base64 Encode(api_key:)>

    + Attributes (SearchPeopleInput)

    + Body

            {
                "query": "query SearchPeople($input: SearchPeopleInput!) { searchPeople(input: $input) { totalResults hasMore results { _id name { first last } linkedin { linkedinUrl linkedinId } currentPositions { title companyInfo { name industry } emails { value type status } phones { value type status } } } } }",
                "variables": {"input": { "email": "niels.bentzen@drc.dk"}}
            }

+ Response 200 (application/json)

    + Attributes (SearchResult)

    + Body

            {
                "data": {
                    "searchPeople": {
                    "totalResults": 1,
                    "hasMore": false,
                    "results": [
                        {
                        "_id": "PersonID-d053d022-7a5d-4d74-80e9-bf05ffb0bd6e",
                        "name": {
                            "first": "Niels",
                            "last": "Bentzen"
                        },
                        "linkedin": {
                            "linkedinUrl": "https://www.linkedin.com/in/niels-bentzen-12539324",
                            "linkedinId": "84546029"
                        },
                        "currentPositions": [
                            {
                            "title": "Program Advisor",
                            "companyInfo": {
                                "name": "Danish Refugee Council / Dansk Flygtningehjælp",
                                "industry": "Nonprofit Organization Management"
                            },
                            "emails": [
                                {
                                "value": "niels.bentzen@drc.dk",
                                "type": "WorkEmail",
                                "status": "Verified"
                                }
                            ],
                            "phones": [
                                {
                                "value": "+45-33-73-50-00",
                                "type": "WorkHQ",
                                "status": "Verified"
                                }
                            ]
                            }
                        ]
                        }
                    ]
                    }
                }
            }

+ Response 400 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

+ Response 401 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }


## Filter Contacts by Email or Phone types [/graphql{?profileFilter}]

Additional search input variables that filter contacts based on the presence of emails or phones.

Different Profile Filters:
HasWorkEmail, HasWorkPhone, HasVerifiedWorkEmail, HasVerifiedWorkPhone, HasPersonalEmail, HasPersonalPhone

For example, including HasWorkEmail in the search input as a profile filter will make the api only look for contacts which have a work email. 

**Request Body**

```
query SearchPeople($input: SearchPeopleInput!) {
  searchPeople(input: $input) {
    totalResults
    hasMore
    results {
      _id
      personalPhones {
        value
        type
      }
      name {
        first
        last
      }
      linkedin {
        linkedinUrl
        linkedinId
      }
      currentPositions {
        title
        dateRange {
          start
          end
        }
        companyInfo {
          name
          numberOfEmployees
          industry
          domain
          address
          country
          logoUrl
          phones
          locationInfo {
            street1
            street2
            city
            areaLevel1
            country
            postalCode
            formattedAddress
          }
        }
        emails {
          value
          type
          status
        }
        phones {
          value
          type
          status
        }
      }
    }
  }
}
Query Variables
{
    "input": {
        "linkedinUrl": "/in/niels-bentzen-12539324",
        "profileFilter" : ["HasWorkEmail"]
    }
}
```

### Request [POST]

Gives back a list of users based on the search input and profile filter.

+ Request (application/json)

    + Header

            Authorization: Basic <Base64 Encode(api_key:)>

    + Attributes (SearchPeopleInput)

    + Body

            {
                "query": "query SearchPeople($input: SearchPeopleInput!) { searchPeople(input: $input) { totalResults hasMore results { _id name { first last } linkedin { linkedinUrl linkedinId } currentPositions { title companyInfo { name industry } emails { value type status } phones { value type status } } } } }",
                "variables": {"input": { "linkedinUrl": "/in/niels-bentzen-12539324" , "profileFilter" : ["HasWorkEmail"]}}
            }

+ Response 200 (application/json)

    + Attributes (SearchResult)

    + Body

            {
                "data": {
                    "searchPeople": {
                    "totalResults": 1,
                    "hasMore": false,
                    "results": [
                        {
                        "_id": "PersonID-d053d022-7a5d-4d74-80e9-bf05ffb0bd6e",
                        "name": {
                            "first": "Niels",
                            "last": "Bentzen"
                        },
                        "linkedin": {
                            "linkedinUrl": "https://www.linkedin.com/in/niels-bentzen-12539324",
                            "linkedinId": "84546029"
                        },
                        "currentPositions": [
                            {
                            "title": "Program Advisor",
                            "companyInfo": {
                                "name": "Danish Refugee Council / Dansk Flygtningehjælp",
                                "industry": "Nonprofit Organization Management"
                            },
                            "emails": [
                                {
                                "value": "niels.bentzen@drc.dk",
                                "type": "WorkEmail",
                                "status": "Verified"
                                }
                            ],
                            "phones": [
                                {
                                "value": "+45-33-73-50-00",
                                "type": "WorkHQ",
                                "status": "Verified"
                                }
                            ]
                            }
                        ]
                        }
                    ]
                    }
                }
            }

+ Response 400 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

+ Response 401 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }


## Search Company by Name [/graphql{?companyName}]

Find a company by name.

**Request Body**

```
query SearchCompany($input: SearchCompanyInput!) {
    searchCompany(input: $input) {
        results {
            name
            alternativeNames
            domain
            linkedinId
            locationInfo {
                city
                areaLevel1
                country
                postalCode
            }
            numberOfEmployees
            industry
        }
    }
}
Query Variables
{
    "input": {
        "name": "leadiq"
    }
}
```

### Request [POST]

Gives back one company based on the search input.

+ Request (application/json)

    + Header

            Authorization: Basic <Base64 Encode(api_key:)>

    + Attributes (SearchCompanyInput)

    + Body

            {
                "query": "query SearchCompany($input: SearchCompanyInput!) { searchCompany(input: $input) { totalResults hasMore results { name alternativeNames domain linkedinId locationInfo { city areaLevel1 country postalCode } numberOfEmployees industry } } } }",
                "variables": {"input": { "name": "leadiq"}}
            }

+ Response 200 (application/json)

    + Attributes (CompanySearchResult)

    + Body

            {
                "data": {
                    "searchCompany": {
                      "results": [
                        {
                          "name": "LeadIQ",
                          "alternativeNames": null,
                          "domain": "leadiq.com",
                          "linkedinId": "6412574",
                          "locationInfo": {
                            "city": "Redwood City",
                            "areaLevel1": "California",
                            "country": "us",
                            "postalCode": "94063"
                          },
                          "numberOfEmployees": 27,
                          "industry": "Computer Software"
                        }
                      ]
                    }
                  }
            }

+ Response 400 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

+ Response 401 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

## Search Company by Domain [/graphql{?companyDomain}]

Find a company by domain.

**Request Body**

```
query SearchCompany($input: SearchCompanyInput!) {
    searchCompany(input: $input) {
        results {
            name
            alternativeNames
            domain
            linkedinId
            locationInfo {
                city
                areaLevel1
                country
                postalCode
            }
            numberOfEmployees
            industry
        }
    }
}
Query Variables
{
    "input": {
        "domain": "leadiq.com"
    }
}
```

### Request [POST]

Gives back one company based on the search input.

+ Request (application/json)

    + Header

            Authorization: Basic <Base64 Encode(api_key:)>

    + Attributes (SearchCompanyInput)

    + Body

            {
                "query": "query SearchCompany($input: SearchCompanyInput!) { searchCompany(input: $input) { totalResults hasMore results { name alternativeNames domain linkedinId locationInfo { city areaLevel1 country postalCode } numberOfEmployees industry } } } }",
                "variables": {"input": { "domain": "leadiq.com"}}
            }

+ Response 200 (application/json)

    + Attributes (CompanySearchResult)

    + Body

            {
                "data": {
                    "searchCompany": {
                      "results": [
                        {
                          "name": "LeadIQ",
                          "alternativeNames": null,
                          "domain": "leadiq.com",
                          "linkedinId": "6412574",
                          "locationInfo": {
                            "city": "Redwood City",
                            "areaLevel1": "California",
                            "country": "us",
                            "postalCode": "94063"
                          },
                          "numberOfEmployees": 27,
                          "industry": "Computer Software"
                        }
                      ]
                    }
                  }
            }

+ Response 400 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

+ Response 401 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

## Contact Feedback Service [/graphql{?feedback}]

### Mark as invalid

For given list of incorrect work emails and phone numbers, creates a feedback to mark them as invalid.

**Request Body**

```
mutation markAsInvalid($input: MarkAsInvalidInput!) {
  markAsInvalid(input: $input)
}
Query Variables
{
    "input": {
        "workEmails": ['nielsen@gmail.com'],
        "workPhones": ['+123456789']
    }
}
```

### Request [POST]

+ Request (application/json)

    + Header

            Authorization: Basic {Base64 Encode(api key:)}:

    + Attributes (MarkAsInvalidInput)

    + Body

            {
                "query": "mutation markAsInvalid($input: MarkAsInvalidInput!) {markAsInvalid(input: $input)}",
                "variables": {"input": {"workEmails": [],"workPhones": []}}
            }


+ Response 200 (application/json)

    + Attributes (MarkAsInvalidResult)

    + Body

            {
                "data": {
                    "markAsInvalid" : true
                }
            }


+ Response 400 (application/json)

    + Body

            {
                "error": "error message"
            }


## Premium Data [/graphql{?premiumData}]

### Premium Data Add Ons 

Different types of premium data can be requested (usually at an additional cost) by specifying the premiumDataAddOns field on the search input.

Different premium data fields: 

- MobilePhone: Adds premium personal mobile phones to the personalPhones field on the PersonRecord

Note that premium usage is not allowed for a trial user by default so you need to speak with someone on our team to enable it for you. 

**Request Body**

```
query SearchPeople($input: SearchPeopleInput!) {
  searchPeople(input: $input) {
    totalResults
    hasMore
    results {
      _id
      personalPhones {
        value
        type
      }
      name {
        first
        last
      }
      linkedin {
        linkedinUrl
        linkedinId
      }
      currentPositions {
        title
        dateRange {
          start
          end
        }
        companyInfo {
          name
          numberOfEmployees
          industry
          domain
          address
          country
          logoUrl
          phones
          locationInfo {
            street1
            street2
            city
            areaLevel1
            country
            postalCode
            formattedAddress
          }
        }
        emails {
          value
          type
          status
        }
        phones {
          value
          type
          status
        }
      }
    }
  }
}
Query Variables
{
    "input": {
        "linkedinUrl": "/in/angelokh",
        "premiumDataAddOns": ["MobilePhone"]
    }
}
```

### Request [POST]

Gives back a list of users based on the search input - linkedin url with premium mobile phones.

+ Request (application/json)

    + Header

            Authorization: Basic <Base64 Encode(api_key:)>

    + Attributes (SearchPeopleInput)

    + Body

            {
                "query": "query SearchPeople($input: SearchPeopleInput!) { searchPeople(input: $input) { results { name { fullName } personalPhones { value type status } } } } }",
                "variables": {"input": { "linkedinUrl": "/in/angelokh", "premiumDataAddOns": ["MobilePhone"]}}
            }

+ Response 200 (application/json)

    + Attributes (SearchResult)

    + Body

            {
                "data": {
                    "searchPeople": {
                        "results": [
                            {
                                "name": {
                                    "fullName": "Angelo Huang"
                                },
                                "personalPhones": [
                                    {
                                        "status": "Verified",
                                        "type": "PersonalMobile",
                                        "value": "+1 408-637-0585"
                                    },
                                    {
                                        "status": "Verified",
                                        "type": "PersonalMobile",
                                        "value": "+1 408-505-2613"
                                    },
                                    {
                                        "status": "Verified",
                                        "type": "PersonalMobile",
                                        "value": "+1 408-505-7325"
                                    },
                                    {
                                        "status": "Verified",
                                        "type": "PersonalPhone",
                                        "value": "+1 510-397-8860"
                                    }
                                ]
                            }
                        ]
                    }
                }
            }

+ Response 400 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

## Advanced Search [/graphql{?advsearch}]

### Advanced Search

Advanced Search queries lets you query company details along with the top n contacts in that company that match the search criteria.

The search input accepts two filters `CompanyFilter` and `ContactFilter` which are used for matching the company and the contact respectively. For example, the following search input will look for contacts with the title as “Software Engineer” in the company “LeadIQ”:

**Request Body**

```
query AdvancedSearch($input: GroupedSearchInput!) {
  groupedAdvancedSearch(input: $input) {
    totalCompanies
    companies {
      company {
        id
        name
        industry
        linkedinId
        domain
        employeeCount
        country
        state
      }
      people {
        id
        name
        title
        linkedinId
        linkedinUrl
        workEmails
        workPhones
        personalEmails
        personalPhones
      }
    }
  }
}

Query variables: 
{
    "input": {
        "companyFilter": {
            "names": [
                "LeadIQ"
            ]
        },
        "contactFilter": {
            "titles": ["founder"]
        },
    "limitPerCompany": 1,
    "sortContactsBy" : ["NameAsc"]
    }
}
```

### Request [POST]

Lets you query company details along with the top n contacts in that company that match the search criteria

+ Request (application/json)

    + Header

            Authorization: Basic <Base64 Encode(api_key:)>

    + Attributes (GroupedSearchInput)

    + Body

            {
                "query": "query AdvancedSearch($input: GroupedSearchInput!) {  groupedAdvancedSearch(input: $input) { totalCompanies companies { company { id name industry linkedinId domain employeeCount country state } people { id name title linkedinId linkedinUrl workEmails workPhones personalEmails personalPhones } } }}",
                "variables": {"input":{"companyFilter":{"names":["LeadIQ"]},"contactFilter":{"titles":["founder"]},"limitPerCompany":1,"sortContactsBy":["NameAsc"]}},"operationName":"AdvancedSearch"}
            }

+ Response 200 (application/json)

    + Attributes (SearchResult)

    + Body

            {
                "data": {
                    "groupedAdvancedSearch": {
                    "companies": [
                        {
                        "company": {
                            "country": "United States",
                            "domain": "leadiq.com",
                            "employeeCount": 11,
                            "id": "MergedCompany-5a1d9d8723000053008d6154",
                            "industry": "Computer Software",
                            "linkedinId": "6412574",
                            "name": "LeadIQ",
                            "state": "California"
                        },
                        "people": [
                            {
                            "id": "PersonID-daf7215b-b37c-4a9c-b847-032d4c98c073",
                            "linkedinId": "4327441",
                            "linkedinUrl": "https://www.linkedin.com/in/angelokh",
                            "name": "Angelo Huang",
                            "personalEmails": [
                                "hidden"
                            ],
                            "personalPhones": null,
                            "title": "Founder",
                            "workEmails": [
                                "hidden"
                            ],
                            "workPhones": [
                                "hidden"
                            ]
                            }
                        ]
                        }
                    ],
                    "totalCompanies": 1
                    }
                }
                }

+ Response 400 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "error message"
                    }
                ]
            }

## Meta Queries [/graphql{?meta}]

### Usage

Usage meta query can be useful for tracking billable(or trial) usage so far, knowing the caps on different usages and knowing your subscription related information.

The `planUsage` field takes an optional from parameter which when not provided gives the usage for the current period (to be billed)

**Request Body**

```
query Usage {
  usage {
    planUsage {
      name
      usageType
      units
      cap
    }
    trialUsage { 
      name
      usageType
      calls
      cap
    }
    subscription {
      status
    }
  }
}
```

### Request [POST]

Gives back the different usage information for the user who is the owner of the used api key.

+ Request (application/json)

    + Header

            Authorization: Basic <Base64 Encode(api_key:)>

    + Attributes (SearchPeopleInput)

    + Body

            {
                "query": "query Usage { usage { planUsage { name usageType units cap } trialUsage { name usageType calls cap } subscription { status } }",
                "variables": {}
            }

+ Response 200 (application/json)

    + Attributes (UsageMeta)

    + Body

            {
                "data": {
                    "usage": {
                        "planUsage": [
                            {
                                "cap": null,
                                "name": "Contact",
                                "units": 100,
                                "usageType": "Standard"
                            },
                            {
                                "cap": null,
                                "name": "Company",
                                "units": 15,
                                "usageType": "Standard"
                            },
                            {
                                "cap": null,
                                "name": "PremiumMobilePhone",
                                "units": 4,
                                "usageType": "Premium"
                            }
                        ],
                        "subscription": {
                            "subscriptionStatus": "Active"
                        },
                        "trialUsage": [
                            {
                                "calls": 1000,
                                "cap": 5001,
                                "name": "API",
                                "usageType": "Standard"
                            },
                            {
                                "calls": 10,
                                "cap": 15,
                                "name": "PremiumMobilePhone",
                                "usageType": "Premium"
                            }
                        ]
                }
            }


# Data Structures

## SearchPeopleInput
+ skip (number)
+ limit (number)
+ firstName (string)
+ lastName (string)
+ middleName (string)
+ fullName (string)
+ company (CompanyDetails)
+ linkedinId (string)
+ linkedinUrl (string)
+ email (string)
+ containsWorkContactInfo (boolean)
+ profileFilter (array[ProfileFilterType])
+ premiumDataAddOns (array[PremiumDataField])

## ProfileFilterType (enum[string])
+ HasWorkEmail (string)
+ HasWorkPhone (string)
+ HasPersonalEmail (string)
+ HasPersonalEmail (string)
+ HasVerifiedWorkEmail (string)
+ HasVerifiedWorkPhone (string)

## PremiumDataField (enum[string])
+ MobilePhone (string)

## SearchCompanyInput
+ name (string)
+ domain (string)
+ linkedinId (string)
+ country (string)

## CompanyDetails
+ name (string)
+ domain (string)
+ linkedinId (string)
+ country (string)

## PersonRecord
+ _id (string)
+ name (NameInfo)
+ currentPositions (array[PositionRecord])
+ pastPositions (array[PositionRecord])
+ linkedin (LinkedinRecord)
+ containsWorkContactInfo (boolean)
+ personalEmails (array[EmailRecord])
+ personalPhones (array[PhoneRecord])

## NameInfo
+ first (string)
+ fullName (string)
+ last (string)
+ middle (string)

## PositionRecord
+ companyId (string)
+ companyInfo (CompanyInfo)
+ title (string)
+ dateRange (DateRange)
+ emails (array[EmailRecord])
+ phones (array[PhoneRecord])
+ sources (array[SourceType_GenericFieldType_GenericFieldStatus])
+ updatedAt (string)

## CompanyInfo
+ name (string)
+ alternativeNames (array[string])
+ domain (string)
+ emailDomains (array[string])
+ type (string)
+ phones (array[string])
+ country (string)
+ address (string)
+ locationInfo (LocationInfo)
+ logoUrl (string)
+ numberOfEmployees (number)
+ industry (string)
+ fundingInfo (FundingInfo)

## LocationInfo
+ formattedAddress (string)
+ street1 (string)
+ street2 (string)
+ city (string)
+ areaLevel1 (string)
+ country (string)
+ postalCode (string)

## FundingInfo
+ fundingRounds (string)
+ fundingTotalUsd (number)
+ lastFundingOn - Timestamp

## DateRange
+ start (number) - Timestamp
+ end (number) - Timestamp

## `SourceType_GenericFieldType_GenericFieldStatus`
+ source (string)
+ type (GenericFieldType)
+ status (GenericStatusType)
+ providerIds (array[string])
+ updatedAt (string)

## GenericFieldType (enum[string])
+ NotApplicable
+ (EmailType)
+ (PhoneType)

## GenericStatusType (enum[string])
+ Valid
+ Invalid
+ (EmailVerificationStatus)
+ (PhoneVerificationStatusType)

## EmailRecord
+ value (string)
+ type (EmailType)
+ status (EmailVerificationStatus)
+ sources (array[SourceType_GenericFieldType_GenericFieldStatus])
+ updatedAt (string)

## EmailType (enum[string])
+ WorkEmail
+ PersonalEmail

## EmailVerificationStatus (enum[string])
+ Verified
+ Unverified
+ VerifiedLikely
+ Invalid

## PhoneRecord
+ value (string)
+ type (PhoneType)
+ status (PhoneVerificationStatusType)
+ sources (array[SourceType_GenericFieldType_GenericFieldStatus])
+ updatedAt (string)

## PhoneType (enum[string])
+ WorkPhone
+ PersonalLandline
+ PersonalMobile
+ WorkMobile
+ WorkHQ
+ PersonalPhone
+ WorkBranch

## PhoneVerificationStatusType (enum[string])
+ Verified
+ Unverified
+ Invalid

## LinkedinRecord
+ guid (string)
+ linkedinId (string)
+ linkedinUrl (string)
+ type (GenericFieldType)
+ status (GenericStatusType)
+ sources (array[SourceType_GenericFieldType_GenericFieldStatus])
+ updatedAt (string)

## SearchResult
+ totalResults (number)
+ hasMore (boolean)
+ results (PersonRecord)

## CompanySearchResult
+ totalResults (number)
+ hasMore (boolean)
+ results (CompanyInfo)

## MarkAsInvalidInput
+ workEmails (array[string])
+ workPhones (array[string])

## MarkAsInvalidResult
+ data (MarkAsInvalidResultRecord)

## MarkAsInvalidResultRecord
+ markAsInvalid (boolean)

## ApiName (enum[string])
+ Contact
+ Company 
+ PremiumMobilePhone
+ API

## ApiUsageType (enum[string])
+ Standard
+ Premium

## PlanUsage
+ name (ApiName)
+ usageType (ApiUsageType)
+ units (number)
+ cap (number)

## TrialUsage
+ name (ApiName)
+ usageType (ApiUsageType)
+ calls (number)
+ cap (number)

## Subscription
+ status (string)

## UsageMeta
+ planUsage (PlanUsage)
+ trialUsage (TrialUsage)
+ subscription (Subscription)

## GroupedSearchInput
+ companyFilter (CompanyFilter)
+ contactFilter (ContactFilter)
+ skip (number)
+ limit (number)
+ limitPerCompany (number)
+ sortCompaniesBy (CompanySortingOption)
+ sortContactsBy (CompanySortingOption)

## CompanyFilter
+ ids (string)
+ names (string)
+ domains (string)
+ linkedinIds (string)
+ industries (string)
+ states (string)
+ countries (string)
+ descriptions (string)
+ technologies (string)
+ technologyCategories (string)

## ContactFilter
+ ids (string)
+ names (string)
+ titles (string)
+ linkedinIds (string)
+ linkedinUrls (string)
+ seniorities (Seniority)
+ roles (string)

## Seniority (enum[string])
+ Other
+ Executive
+ Manager
+ VP
+ Director

## CompanySortingOption (enum[string])
+ IndustryDesc
+ IdAsc
+ NameAsc
+ IndustryAsc
+ IdDesc
+ NameDesc

# Group Using GraphQL
<a name="using-graphql"></a>

GraphQL is a web technology used to decouple the request/response structure from particular endpoints.
It works by acting as a layer over existing request/response systems (most frequently HTTP) that allows the client to specify the type and structure of data that they wish to receive.

The server manages efficiently receiving queries and aggregating the requisite data for the client.

## Getting Started

Working with GraphQL is fairly simply however it can be somewhat unusual for people are coming from REST backgrounds. It should seem more familiar to those who have dealt with Databases in the past as it is simply a query language for client requests.

To use GraphQL you need to know what types are available to the client for requests. For REST endpoints this is quite static, as the endpoints are developed by the API server and then exposed for consumption. Meaning that changing the data requires the server bumps up new API version. For GraphQL, this is only the case if there are *brand-new* types being introduced, otherwise you can compose the existing types in any manner you please.

To see the support types in the LeadIQ GraphQL API you could try reading the schema using tools like Insomnia or GraphQL Playground.

## Resources
GraphQL as a technology is far too large to elaborate completely here. For more technical references on how to use GraphQL itself please review the following resources.

- [GraphQL Docs](http://graphql.org/learn/)

Here is the list of tools that you can download to explore GraphQL schema.

- [Insomnia](https://insomnia.rest/graphql/)
- [GraphQL Playground](https://github.com/prisma/graphql-playground)
